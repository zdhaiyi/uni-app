if("undefined"==typeof Promise||Promise.prototype.finally||(Promise.prototype.finally=function(e){const t=this.constructor;return this.then((n=>t.resolve(e()).then((()=>n))),(n=>t.resolve(e()).then((()=>{throw n}))))}),"undefined"!=typeof uni&&uni&&uni.requireGlobal){const e=uni.requireGlobal();ArrayBuffer=e.ArrayBuffer,Int8Array=e.Int8Array,Uint8Array=e.Uint8Array,Uint8ClampedArray=e.Uint8ClampedArray,Int16Array=e.Int16Array,Uint16Array=e.Uint16Array,Int32Array=e.Int32Array,Uint32Array=e.Uint32Array,Float32Array=e.Float32Array,Float64Array=e.Float64Array,BigInt64Array=e.BigInt64Array,BigUint64Array=e.BigUint64Array}uni.restoreGlobal&&uni.restoreGlobal(Vue,weex,plus,setTimeout,clearTimeout,setInterval,clearInterval),function(e){"use strict";function t(e){return weex.requireModule(e)}function n(e,t,...n){uni.__log__?uni.__log__(e,t,...n):console[e].apply(console,[...n,t])}const s=(t,n=0)=>(n,s=e.getCurrentInstance())=>{!e.isInSSRComponentSetup&&e.injectHook(t,n,s)},a=s("onHide",3),o=s("onLaunch",1),i=(e,t)=>{const n=e.__vccOpts||e;for(const[s,a]of t)n[s]=a;return n},c=i({__name:"uni-icons",props:{type:{type:String,default:""},size:{type:[Number,String],default:32},color:{type:String,default:"#333"}},setup:t=>(n,s)=>(e.openBlock(),e.createElementBlock("view",{class:e.normalizeClass(["uni-icons",[t.type?"uni-icons-"+t.type:""]]),style:e.normalizeStyle({color:t.color,"font-size":t.size+"rpx"})},["compass"===t.type?(e.openBlock(),e.createElementBlock("text",{key:0},"🧭")):"chat"===t.type?(e.openBlock(),e.createElementBlock("text",{key:1},"💬")):"chatboxes"===t.type?(e.openBlock(),e.createElementBlock("text",{key:2},"📨")):"personadd"===t.type?(e.openBlock(),e.createElementBlock("text",{key:3},"👤")):"camera"===t.type?(e.openBlock(),e.createElementBlock("text",{key:4},"📷")):"person"===t.type?(e.openBlock(),e.createElementBlock("text",{key:5},"👥")):"game"===t.type?(e.openBlock(),e.createElementBlock("text",{key:6},"🎮")):"more"===t.type?(e.openBlock(),e.createElementBlock("text",{key:7},"⋯")):"refresh"===t.type?(e.openBlock(),e.createElementBlock("text",{key:8},"🔄")):(e.openBlock(),e.createElementBlock("text",{key:9},"❓"))],6))},[["__scopeId","data-v-26c0e3c9"]]),l=(...e)=>{n("log","at utils/android-vpn.js:8","[VPN-JS]",...e)},r=(...e)=>{n("error","at utils/android-vpn.js:11","[VPN-JS]",...e)};function u(e=""){return e?e.length<=2?"*".repeat(e.length):e[0]+"*".repeat(e.length-2)+e[e.length-1]:""}const d=new class{constructor(){this.vpn=null,this.available=!1,this.inited=!1,this.isConnecting=!1,this.isConnected=!1,this.statusCb=null,this._heartbeat=null,this._watchdog=null}_emit(e){l("状态派发 _emit =>",e);try{"function"==typeof this.statusCb&&this.statusCb(e||{})}catch(t){r("状态回调异常:",t)}}onStatusUpdate(e){this.statusCb=e}offStatusUpdate(){this.statusCb=null}async initialize(){if(this.inited)return l("initialize: 已初始化，available=",this.available),this.available;try{const e=uni.getSystemInfoSync();if(l("initialize: 平台=",e.platform,"系统版本=",e.system,"appVersion=",e.appVersion),"android"!==e.platform)return l("非 Android 平台，跳过原生插件"),this.available=!1,this.inited=!0,!1;0,this.vpn=t("MyVpnPlugin"),l("initialize: requireNativePlugin(MyVpnPlugin) =>",this.vpn?"OK":"NULL"),this.available=!!this.vpn,this.available&&"function"==typeof this.vpn.onVpnStatusUpdate?(l("initialize: 注册 onVpnStatusUpdate 回调"),this.vpn.onVpnStatusUpdate((e=>{l("onVpnStatusUpdate 回调 =>",e);const t=!(!e||!e.connected&&!e.isConnected);this.isConnected=t,this.isConnecting=!1,this._emit({connected:t,status:t?"connected":"disconnected",message:e&&(e.message||e.msg)||(t?"已连接":"未连接")})}))):this.available?l("原生插件不提供 onVpnStatusUpdate（没关系，走轮询逻辑）"):l("未加载到原生插件，将使用模拟模式")}catch(e){r("初始化异常：",e),this.available=!1}return this.inited=!0,l("initialize 完成，available=",this.available),this.available}async syncStatus(){l("syncStatus: 开始");const e=await this.getStatus();return this.isConnected=!!e.connected,this.isConnecting=!1,this._emit({connected:this.isConnected,status:this.isConnected?"connected":"disconnected",message:e.message||(this.isConnected?"已连接":"未连接")}),l("syncStatus: 同步结束 =>",e),e}async getStatus(){if(l("getStatus: 调用"),this.inited||await this.initialize(),this.available&&this.vpn)try{if("function"==typeof this.vpn.getVpnStatus&&0===this.vpn.getVpnStatus.length){const e=this.vpn.getVpnStatus();l("getStatus: 同步返回 =>",e);const t=!(!e||!e.connected&&!e.isConnected);return{connected:t,status:t?"connected":"disconnected",message:e&&(e.message||e.msg)||(t?"已连接":"未连接")}}if("function"==typeof this.vpn.getVpnStatus)return l("getStatus: 走回调式"),await new Promise((e=>{try{this.vpn.getVpnStatus((t=>{l("getStatus callback =>",t);const n=!(!t||!t.connected&&!t.isConnected);e({connected:n,status:n?"connected":"disconnected",message:t&&(t.message||t.msg)||(n?"已连接":"未连接")})}))}catch(t){r("getStatus 回调异常：",t),e({connected:!1,status:"disconnected",message:"未连接"})}}))}catch(e){r("getStatus 异常：",e)}return l("getStatus: 无原生或异常，退回本地标志 =>",{isConnected:this.isConnected,isConnecting:this.isConnecting}),{connected:this.isConnected,status:this.isConnected?"connected":this.isConnecting?"connecting":"disconnected",message:this.isConnected?"已连接":"未连接"}}_pollUntilConnected(e=15e3){l("_pollUntilConnected: 开始，超时(ms)=",e);const t=Date.now();return new Promise(((n,s)=>{const a=async()=>{const o=await this.getStatus();return l("_pollUntilConnected: tick =>",o),o.connected?n(o):Date.now()-t>e?s(new Error("连接超时")):void setTimeout(a,800)};a()}))}async connect(e){l("connect: 入参节点 =>",{host:e&&e.host,port:e&&e.port,account:e&&u(e.account),password:e&&u(e.password),status:e&&e.status,expire:e&&e.expire});const t=Date.now();if(this.inited||await this.initialize(),!e||!e.host||!e.port)throw r("connect: 节点信息不完整"),new Error("节点信息不完整");if(this.isConnecting)throw r("connect: 正在连接中"),new Error("连接中，请稍候");if((await this.syncStatus()).connected)throw r("connect: 原生已连接，直接报错阻止重复连接"),new Error("已连接，请先断开");if(this.isConnected)throw r("connect: JS 标志已连接（通常不会发生，已在上一步同步），阻止继续"),new Error("已连接，请先断开");const n={proxyType:"socks5",server:e.host,port:parseInt(e.port,10)||1080,username:e.account||"",password:e.password||"",authType:e.account&&e.password?"password":"none"};if(l("connect: 组装参数 =>",{...n,password:u(n.password)}),this.isConnecting=!0,this._emit({connected:!1,status:"connecting",message:"连接中..."}),this.available&&this.vpn&&"function"==typeof this.vpn.startVpn){l("connect: 调用原生 startVpn");const e=new Promise(((e,t)=>{this._watchdog=setTimeout((()=>{r("connect: 看门狗触发（30s），判定超时"),this.isConnecting=!1,this._emit({connected:!1,status:"error",message:"连接超时"}),t(new Error("连接超时"))}),3e4)})),s=new Promise(((e,t)=>{try{this.vpn.startVpn.length>=2?(l("connect: startVpn 使用 回调模式"),this.vpn.startVpn(n,(n=>{l("connect: startVpn 回调 =>",n);const s=!(!n||!n.success);this.isConnecting=!1,this.isConnected=s,clearTimeout(this._watchdog),this._emit({connected:s,status:s?"connected":"error",message:n&&n.message||(s?"连接成功":"连接失败")}),s?e(n):t(new Error(n&&n.message||"连接失败"))}))):(l("connect: startVpn 无回调，先调用再轮询"),this.vpn.startVpn(n),e(null))}catch(s){clearTimeout(this._watchdog),this.isConnecting=!1,this.isConnected=!1,this._emit({connected:!1,status:"error",message:s.message||"连接异常"}),t(s)}})),a=this._pollUntilConnected(15e3),o=await Promise.race([s.then((()=>this.getStatus())),a,e]);l("connect: 首个完成的结果 =>",o),clearTimeout(this._watchdog);const i=await this.getStatus();l("connect: 最终状态 =>",i),this.isConnected=!!i.connected,this.isConnecting=!1,this._emit({connected:this.isConnected,status:this.isConnected?"connected":"disconnected",message:i.message||(this.isConnected?"连接成功":"连接失败")});const c=Date.now()-t;if(l(`connect: 结束，耗时 ${c}ms，connected=${this.isConnected}`),!this.isConnected)throw new Error(i.message||"连接失败");return{success:!0,message:i.message||"连接成功"}}return l("connect: 无原生插件，进入模拟模式"),await this._mockConnect()}async disconnect(){return l("disconnect: 调用"),this.available&&this.vpn&&"function"==typeof this.vpn.stopVpn?await new Promise((e=>{try{this.vpn.stopVpn((t=>{l("disconnect: stopVpn 回调 =>",t),this.isConnected=!1,this.isConnecting=!1,this._emit({connected:!1,status:"disconnected",message:t&&t.message||"已断开"}),e(t||{success:!0})}))}catch(t){r("disconnect: stopVpn 异常 =>",t),this.isConnected=!1,this.isConnecting=!1,this._emit({connected:!1,status:"disconnected",message:"已断开"}),e({success:!0})}})):(clearInterval(this._heartbeat),this._heartbeat=null,this.isConnected=!1,this.isConnecting=!1,this._emit({connected:!1,status:"disconnected",message:"已断开（模拟）"}),{success:!0})}async forceDisconnect(e=!0){l("forceDisconnect: 调用，force=",e);try{if(e){if(this.vpn&&"function"==typeof this.vpn.stopVpn)try{await new Promise((e=>{try{this.vpn.stopVpn((()=>{l("forceDisconnect: stopVpn 完成"),e()}))}catch(t){l("forceDisconnect: stopVpn 捕获异常但继续",t),e()}}))}catch(t){l("forceDisconnect: 外层异常忽略",t)}}else await this.disconnect()}catch(t){l("forceDisconnect: 异常忽略",t)}this.hardReset()}hardReset(){l("hardReset: 本地状态复位"),clearInterval(this._heartbeat),this._heartbeat=null,clearTimeout(this._watchdog),this._watchdog=null,this.isConnected=!1,this.isConnecting=!1,this._emit({connected:!1,status:"disconnected",message:"已断开"})}async _mockConnect(){return l("_mockConnect: 开始"),await new Promise((e=>{setTimeout((()=>{this.isConnecting=!1,this.isConnected=!0,this._emit({connected:!0,status:"connected",message:"模拟连接成功"}),clearInterval(this._heartbeat),this._heartbeat=setInterval((()=>{this.isConnected&&this._emit({connected:!0,status:"connected",message:"模拟运行中"})}),3e3),l("_mockConnect: 完成 => connected=true"),e({success:!0,message:"模拟连接成功"})}),1e3)}))}},p=i({__name:"index",setup(t){const s=(...e)=>n("log","at pages/index/index.vue:102","[PAGE]",...e),a=(...e)=>n("error","at pages/index/index.vue:103","[PAGE]",...e),o=e.ref(!1),i=e.ref(""),l=e.ref(""),r=e.ref(!1),u=e.ref(!1),p=e.ref("未连接"),h=e.ref("--"),g=e.ref("--"),m=e.ref("连接VPN"),v=e.ref([]),y=e.ref(null),f=e.ref(1),w=e.ref(20),V=e.ref(!1);let N=null;const S=e.computed((()=>v.value.filter((e=>e.status&&!k(e))))),C=e.computed((()=>r.value?"connected":u.value?"connecting":"disconnected"));async function E(){if(!o.value)return uni.showToast({title:"请先登录",icon:"none"}),void s("refreshNodes: 未登录，取消请求");if(V.value)s("refreshNodes: 正在加载中，忽略");else{V.value=!0,uni.showLoading({title:"获取节点中..."}),s("refreshNodes: 发起请求",{page:f.value,pageSize:w.value});try{const e=await uni.request({url:"http://124.223.21.69/api/nodes",method:"GET",data:{page:f.value,pageSize:w.value},header:{Authorization:"Bearer "+l.value}});s("refreshNodes: 响应 status=",e.statusCode,"data=",e.data);let t=[];Array.isArray(e.data)?t=e.data:e.data&&Array.isArray(e.data.nodes)?t=e.data.nodes:e.data&&Array.isArray(e.data.data)&&(t=e.data.data),v.value=(t||[]).map((e=>({...e}))),s("refreshNodes: 处理后的节点数=",v.value.length),v.value.slice(0,5).forEach(((e,t)=>{s(`  节点[${t}]`,{tag:e.tag,host:e.host,port:e.port,status:e.status,expire:e.expire})}));const n=v.value.findIndex((e=>e.status&&!k(e)));y.value=-1!==n?n:v.value.length?0:null,s("refreshNodes: selectedIndex=",y.value)}catch(e){a("refreshNodes: 请求异常 =>",e),uni.showToast({title:"获取节点失败",icon:"none"})}finally{V.value=!1,uni.hideLoading()}}}function k(e){return!!(null==e?void 0:e.expire)&&new Date(e.expire).getTime()<=Date.now()}function _(e){if(!e)return"无过期";const t=new Date(e),n=t.getFullYear(),s=(t.getMonth()+1).toString().padStart(2,"0"),a=t.getDate().toString().padStart(2,"0"),o=t.getTime()-Date.now();if(o>0){const e=Math.ceil(o/864e5);if(e<=30)return`${e}天后过期`}return`${n}-${s}-${a}`}async function x(){o.value?uni.showModal({title:"确认退出",content:"确定要退出登录吗？",success:async({confirm:e})=>{e&&(s("handleAuth: 退出登录 -> 强制断开"),await d.forceDisconnect(!0),uni.removeStorageSync("token"),uni.removeStorageSync("username"),o.value=!1,l.value="",i.value="",v.value=[],y.value=null,r.value=!1,u.value=!1,p.value="未连接",m.value="连接VPN",h.value="--",g.value="--",uni.showToast({title:"已退出登录",icon:"success"}))}}):(s("handleAuth: 跳转登录页"),uni.navigateTo({url:"/pages/login/login"}))}async function b(){if(u.value)return void s("toggleVPN: 正在连接中，忽略");if(!o.value)return uni.showToast({title:"请先登录",icon:"none"}),void s("toggleVPN: 未登录");if(null===y.value)return uni.showToast({title:"请选择节点",icon:"none"}),void s("toggleVPN: 未选择节点");s("toggleVPN: 前置 syncStatus");const e=await d.syncStatus();if(s("toggleVPN: 原生状态 =>",e),e.connected)return s("toggleVPN: 真实已连接 => 执行断开"),void(await P());r.value?(s("toggleVPN: JS 标志已连接 => 执行断开"),await P()):(s("toggleVPN: 执行连接"),await async function(){const e=v.value[y.value];if(!e)return void a("connectVPN: 未取到节点");if(!e.status||k(e))return uni.showToast({title:"该节点不可用",icon:"none"}),void a("connectVPN: 节点不可用 =>",{tag:e.tag,status:e.status,expire:e.expire});u.value=!0,p.value="连接中...",m.value="连接中...",s("connectVPN: 调用 androidVpn.connect",{tag:e.tag,host:e.host,port:e.port});try{const t=await d.connect(e);s("connectVPN: connect 返回 =>",t)}catch(t){a("connectVPN: 异常 =>",t),u.value=!1,r.value=!1,p.value="连接失败",m.value="连接VPN",uni.showToast({title:t.message||"连接失败",icon:"none"})}}())}async function P(){s("disconnectVPN: 调用 androidVpn.disconnect");try{const e=await d.disconnect();s("disconnectVPN: 返回 =>",e)}catch(e){a("disconnectVPN: 异常 =>",e),uni.showToast({title:e.message||"断开失败",icon:"none"})}}function B(e){s("handleVpnStatus: 收到 =>",e);const t=!(!e||!e.connected&&!e.isConnected);if(r.value=t,u.value=!1,p.value=e&&e.message?e.message:t?"已连接":"未连接",m.value=t?"断开连接":"连接VPN",t&&null!==y.value){const e=v.value[y.value];h.value=`${e.tag} · ${e.host}:${e.port}`,N&&(clearInterval(N),N=null);let t=0;g.value="连接时间: 00:00",N=setInterval((()=>{t++;const e=String(Math.floor(t/60)).padStart(2,"0"),n=String(t%60).padStart(2,"0");g.value=`连接时间: ${e}:${n}`}),1e3)}else N&&(clearInterval(N),N=null),h.value="--",g.value="--";e&&"error"===e.status&&e.message&&uni.showToast({title:e.message,icon:"none"})}return e.onMounted((async()=>{s("mounted: 开始"),function(){const e=uni.getStorageSync("token"),t=uni.getStorageSync("username");o.value=!(!e||!t),l.value=e||"",i.value=t||"",s("checkLogin:",{isLoggedIn:o.value,username:i.value})}(),await d.initialize(),d.onStatusUpdate(B);const e=await d.syncStatus();s("mounted: syncStatus =>",e),r.value=!!e.connected,u.value=!1,p.value=e.message||(e.connected?"已连接":"未连接"),m.value=e.connected?"断开连接":"连接VPN",o.value&&E()})),e.onUnmounted((()=>{s("unmounted: 解绑回调 & 清计时器"),d.offStatusUpdate(),N&&(clearInterval(N),N=null)})),(t,n)=>{const a=(l=e.resolveDynamicComponent("uni-icons"),d=c,"string"==typeof l?d:l);var l,d;return e.openBlock(),e.createElementBlock("view",{class:"container"},[e.createElementVNode("view",{class:"header"},[e.createElementVNode("view",{class:"user-info"},[o.value?(e.openBlock(),e.createElementBlock("text",{key:0,class:"welcome-text"},"欢迎, "+e.toDisplayString(i.value),1)):(e.openBlock(),e.createElementBlock("text",{key:1,class:"welcome-text"},"请先登录")),e.createElementVNode("button",{class:"btn-auth",onClick:x},e.toDisplayString(o.value?"退出登录":"登录"),1)])]),e.createElementVNode("view",{class:"vpn-status-card"},[e.createElementVNode("view",{class:"status-header"},[e.createElementVNode("view",{class:e.normalizeClass(["status-indicator",C.value])},null,2),e.createElementVNode("text",{class:"status-text"},e.toDisplayString(p.value),1)]),e.createElementVNode("view",{class:"connection-info"},e.toDisplayString(h.value),1),e.createElementVNode("view",{class:"connection-time"},e.toDisplayString(g.value),1),e.createElementVNode("button",{class:e.normalizeClass(["btn-connect",{connecting:u.value}]),onClick:b,disabled:!o.value||0===v.value.length||null===y.value},e.toDisplayString(m.value),11,["disabled"])]),e.createElementVNode("view",{class:"section"},[e.createElementVNode("view",{class:"section-header"},[e.createElementVNode("text",{class:"section-title"},"节点列表"),e.createElementVNode("view",{class:"section-action",onClick:E},[e.createElementVNode("text",{class:"refresh-text"},"刷新"),e.createVNode(a,{type:"refresh",size:"16",color:"#4361ee"})])]),e.createElementVNode("view",{class:"nodes-stats"},[e.createElementVNode("text",{class:"stats-text"},"可用节点: "+e.toDisplayString(S.value.length)+"/"+e.toDisplayString(v.value.length),1)]),e.createElementVNode("scroll-view",{class:"node-list","scroll-y":""},[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(v.value,((t,n)=>(e.openBlock(),e.createElementBlock("view",{key:t._id||n,class:e.normalizeClass(["node-item",{selected:y.value===n,offline:!t.status||k(t),"no-auth":!1}]),onClick:e=>function(e){const t=v.value[e];if(t){if(!t.status||k(t))return uni.showToast({title:"该节点不可用",icon:"none"}),void s("selectNode: 节点不可用 =>",{i:e,tag:t.tag,status:t.status,expire:t.expire});y.value=e,s("selectNode: 选择成功 =>",{i:e,tag:t.tag}),r.value&&(h.value=`${t.tag} · ${t.host}:${t.port}`)}}(n)},[e.createElementVNode("view",{class:"node-info"},[e.createElementVNode("view",{class:"node-details"},[e.createElementVNode("text",{class:"node-name"},e.toDisplayString(t.tag),1),e.createElementVNode("view",{class:"node-meta"},[e.createElementVNode("text",{class:"node-location"},e.toDisplayString(t.host)+":"+e.toDisplayString(t.port),1),e.createElementVNode("text",{class:"node-expire"},e.toDisplayString(_(t.expire)),1)])])]),e.createElementVNode("view",{class:"node-status"},[e.createElementVNode("view",{class:"status-indicators"},[e.createElementVNode("text",{class:e.normalizeClass(t.status?"status-online":"status-offline")},e.toDisplayString(t.status?"在线":"离线"),3),e.createElementVNode("text",{class:"status-noauth"},e.toDisplayString(t.account&&t.password?"需认证":"免认证"),1)]),y.value===n?(e.openBlock(),e.createElementBlock("view",{key:0,class:"selected-indicator"},[e.createVNode(a,{type:"checkmark",size:"16",color:"#4361ee"})])):e.createCommentVNode("",!0)])],10,["onClick"])))),128)),0===v.value.length?(e.openBlock(),e.createElementBlock("view",{key:0,class:"empty-state"},[e.createElementVNode("text",null,"暂无节点数据，请先登录或刷新")])):e.createCommentVNode("",!0)])]),e.createElementVNode("view",{class:"section tips-section"},[e.createElementVNode("view",{class:"section-header"},[e.createElementVNode("text",{class:"section-title"},"使用提示")]),e.createElementVNode("view",{class:"tips-content"},[e.createElementVNode("text",{class:"tip-item"},"• 节点“免认证”说明可直接连接（SOCKS5 无认证）"),e.createElementVNode("text",{class:"tip-item"},"• 首次连接会弹出 VPN 许可对话框，请允许"),e.createElementVNode("text",{class:"tip-item"},"• 连接后可切到后台，服务会常驻")])])])}}},[["__scopeId","data-v-64b19c2c"]]),h=i({__name:"login",setup(t){const n=e.ref("test_pan_1234"),s=e.ref("123456"),a=async()=>{var e;if(!n.value||!s.value)return uni.showToast({title:"请输入用户名和密码",icon:"none"});uni.showLoading({title:"登录中..."});try{const t=await uni.request({url:"http://124.223.21.69/api/users/login",method:"POST",data:{username:n.value,password:s.value},header:{"Content-Type":"application/json"}});if(200!==t.statusCode||!t.data)throw new Error((null==(e=t.data)?void 0:e.message)||"登录失败");{const e=t.data.token||t.data.accessToken;if(!e)throw new Error("未返回 token");uni.setStorageSync("token",e),uni.setStorageSync("username",n.value),uni.showToast({title:"登录成功",icon:"success"}),setTimeout((()=>{uni.reLaunch({url:"/pages/index/index"})}),500)}}catch(t){uni.showToast({title:t.message||"登录失败",icon:"none"})}finally{uni.hideLoading()}};return(t,o)=>(e.openBlock(),e.createElementBlock("view",{class:"login-container"},[e.createElementVNode("view",{class:"login-header"},[e.createElementVNode("view",{class:"title-container"},[e.createElementVNode("image",{class:"title-icon",src:"/static/icon.ico",mode:"aspectFit"}),e.createElementVNode("text",{class:"login-title"},"e加速")]),e.createElementVNode("text",{class:"login-subtitle"},"请登录您的VPN账户")]),e.createElementVNode("view",{class:"login-form"},[e.createElementVNode("view",{class:"input-group"},[e.createElementVNode("text",{class:"input-label"},"用户名"),e.withDirectives(e.createElementVNode("input",{class:"input-field",type:"text","onUpdate:modelValue":o[0]||(o[0]=e=>n.value=e),placeholder:"请输入用户名"},null,512),[[e.vModelText,n.value]])]),e.createElementVNode("view",{class:"input-group"},[e.createElementVNode("text",{class:"input-label"},"密码"),e.withDirectives(e.createElementVNode("input",{class:"input-field",type:"password","onUpdate:modelValue":o[1]||(o[1]=e=>s.value=e),placeholder:"请输入密码"},null,512),[[e.vModelText,s.value]])]),e.createElementVNode("button",{class:"btn-login",onClick:a},"登录"),e.createElementVNode("view",{class:"login-tips"})])]))}},[["__scopeId","data-v-8e7e90ee"]]);__definePage("pages/index/index",p),__definePage("pages/login/login",h);const g=i({__name:"App",setup:e=>(o((()=>{n("log","at App.vue:10","App Launch");uni.getStorageSync("token")&&uni.reLaunch({url:"/pages/index/index"})})),n("log","at App.vue:22","App Show"),a((()=>{n("log","at App.vue:26","App Hide")})),()=>{})},[["__scopeId","data-v-bd34b86b"]]);const{app:m,Vuex:v,Pinia:y}={app:e.createVueApp(g)};uni.Vuex=v,uni.Pinia=y,m.provide("__globalStyles",__uniConfig.styles),m._component.mpType="app",m._component.render=()=>{},m.mount("#app")}(Vue);
